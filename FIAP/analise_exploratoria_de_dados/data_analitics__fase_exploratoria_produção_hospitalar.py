# -*- coding: utf-8 -*-
"""Data_Analitics_ Fase_Exploratoria_Produção_Hospitalar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16-UJaHePyC1reYCq1XsdHiyRkwGbUkQ9

##Analise de Dados Hospitalar##

##Aula 1##
"""

import pandas as pd
import numpy as np

"""Instale a biblioteca chardet para identificar a codificação correta:

1️⃣
with open(...) as f: → Abre o arquivo no caminho especificado

'rb' → O arquivo é aberto no modo leitura binária (rb = read binary).
✅ Motivo: Quando lemos um arquivo como binário, evitamos problemas de codificação na leitura.

2️⃣ result = chardet.detect(f.read())
f.read() → Lê todo o conteúdo do arquivo como bytes.

chardet.detect(...) → A biblioteca chardet (Charset Detection) analisa o conteúdo e tenta identificar a codificação correta.

3️⃣ print(result['encoding'])
result é um dicionário que contém informações sobre a codificação detectada.

result['encoding'] → Mostra apenas o nome da codificação (exemplo: 'utf-8', 'ISO-8859-1', 'Windows-1252', etc.).
"""

import chardet

with open('/content/sih_cnv_qiuf105000179_133_86_120.csv', 'rb') as f:
    result = chardet.detect(f.read())
    print(result['encoding'])  # Mostra a codificação do arquivo

"""Dados = DataFrame

Skiprows = pular as primeiras linhas

skipfooter = pular ultimas linhas

Thousands= para formatar milhares

Engine = tipo de linguagem usada
"""

dados = pd.read_csv('/content/sih_cnv_qiuf105000179_133_86_120.csv', encoding= (result['encoding']), skiprows=3, sep=';', skipfooter=12, thousands='.', decimal=',', engine='python')

dados.tail() #Traz 5 ultimas linha

dados.head() #Traz 5 primeiras linha

dados.info()

pd.options.display.float_format = '{:.2f}'.format

# Certifique-se de converter os valores para numérico
dados = dados.replace('-', float('nan'))  # Substitui traços por NaN
dados = dados.apply(pd.to_numeric, errors='coerce')  # Converte para numérico

# Agora pode calcular a média
resultado = dados.mean()

# Substituir '-' por NaN e converter tudo que for possível para numérico
dados = dados.replace('-', np.nan).apply(pd.to_numeric, errors='coerce')

# Selecionar colunas numéricas e calcular a média
dados_mean = dados.select_dtypes(include=['number']).mean()

print(dados_mean)

# Primeiro, removemos as colunas que não são de meses
meses = dados.drop(columns=['Total'])

# Ordenar as colunas para garantir que estão em ordem cronológica
meses = meses[sorted(meses.columns, key=lambda x: pd.to_datetime(x, errors='coerce'))]

# O mês mais recente será a última coluna após a ordenação
mes_recente = meses.columns[-1]

# Exibir a coluna inteira referente ao mês mais recente
coluna_mes_recente = meses[mes_recente]

#print(f"A coluna do mês mais recente ({mes_recente}):")
print(coluna_mes_recente)

# Primeiro, separamos a coluna de UF
uf_column = dados['Unidade da Federação']

# Removemos a coluna 'Total' e a coluna 'Unidade da Federação'
meses = dados.drop(columns=['Total', 'Unidade da Federação'])

# Agora ordenamos apenas as colunas de meses
# Convertemos os nomes das colunas (que são meses em formato 'ano/mês') para objetos datetime
colunas_ordenadas = sorted(meses.columns,
                         key=lambda x: pd.to_datetime(x, format='%Y/%b', errors='coerce'))

# O mês mais recente será a última coluna após a ordenação
mes_recente = colunas_ordenadas[-1]

# Agora criamos um DataFrame com a UF e o mês mais recente
resultado = pd.DataFrame({
    mes_recente: dados[mes_recente]
})

# Filtramos linhas com valores nulos ou vazios
resultado = resultado[resultado[mes_recente].notna() & (resultado[mes_recente] != 0) & (resultado[mes_recente] != '-')]

# Convertemos para numérico
resultado[mes_recente] = pd.to_numeric(resultado[mes_recente].replace('-', np.nan), errors='coerce')

# Ordenamos e exibimos
resultado = resultado.sort_values(by=mes_recente, ascending=False)
print(f"Dados do mês mais recente: {mes_recente}")
print(resultado)

"""##Aula 2 ##"""

dados["2024/Dez"] #selecionando a primeira coluna, quando selecionamos algo dentro do dataframe, retorna uma série de valores

from google.colab import drive
drive.mount('/content/drive')

dados["2024/Dez"].mean() #média da nossa série de valores

dados.plot(x="Unidade da Federação", y="2024/Dez") #plotando os dados no gráfico de linha, Case sensitive = sensível a maiúsculas e minúsculas

dados.plot(x="Unidade da Federação", y="2024/Dez", kind="bar") #kind = tipo de gráfico

dados.plot(x="Unidade da Federação", y="2024/Dez", kind="bar", figsize=(9,6)) #figsize: redimensiona o tamanho do gráfico, primeiro horizontalmente, segundo verticalmente

import matplotlib.pyplot as plt #importando o pyplot para formatar o eixo y
import matplotlib.ticker as ticker #importando o ticker para formatar o eixo y

axis = dados.plot(x="Unidade da Federação", y="2024/Dez", kind="bar", figsize=(9,6))
axis.yaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.2f}')) #formatando o eixo y

plt.title("Valor por Unidade da Federação:") #adicionando o título no gráfico
plt.show()

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

axis = dados.plot(x="Unidade da Federação", y="2024/Dez", kind="bar", figsize=(20,6))
axis.yaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.2f}'))

plt.title("Valor por Unidade da Federação:")
plt.xticks(rotation=60)  # Rotaciona os rótulos do eixo X
plt.tight_layout() # Ajusta layout para evitar sobreposição
plt.show()